#!/usr/bin/env bash

help="Backs up files onto another volume. Usage:

  backup file
  backup vault
  backup critical"

source "$(dirname "$0")/script.sh"

cleanup() {
  rm -f /tmp/backup.* || true
  exit "$1"
}

file_directory="file:/vault/woop-backup/"
file_music_directory="file:/vault/share/music/"
vault_volume="/Volumes/vault/"
critical_volume="/Volumes/misc/"
critical_directories=("$HOME/Desktop/" "$HOME/critical/" "$HOME/code/" "$HOME/web/" "$HOME/.ssh/" "$HOME/my-music/" "$HOME/writing/")
stampfile="backup-date.txt"

synchronize() {
  rsync -av --delete --ignore-errors "$@" || true
}

check_integrity() {
  local sdb1="$(mktemp /tmp/backup.XXXXXX)"
  cd "$1"
  integrity db . "$sdb1" || true

  local sdb2="$(mktemp /tmp/backup.XXXXXX)"
  cd "$2"
  integrity db . "$sdb2" || true

  integrity check "$sdb1" "$sdb2" || true
}

file() {
  synchronize "$HOME/" "$file_directory"
  synchronize /Users/Shared/music/ "$file_music_directory"
}

vault() {
  [[ -d "$vault_volume" ]] || error "$vault_volume not mounted"
  synchronize /Users/ "${vault_volume}Users/"
  udate > "${vault_volume}Users/$stampfile"
  #check_integrity /Users/ "${vault_volume}Users"
  diskutil eject "$vault_volume"
}

critical() {
  [[ -d "$critical_volume" ]] || error "$critical_volume not mounted"
  for critical in ${critical_directories[@]}; do
    synchronize "$critical" "$critical_volume/$critical"
  done
  udate > "$critical_volume/$stampfile"
  diskutil eject "$critical_volume"
}

[[ $# -gt 0 ]] || usage
for argument in $@; do
  case "$argument" in
  file)
    file
    ;;
  vault)
    vault
    ;;
  critical)
    critical
    ;;
  *)
    usage
    ;;
  esac
done
cleanup 0
