#!/usr/bin/env bash

help="Backs up files onto another volume. Usage:

  backup vault
  backup critical"

source "$HOME"/bin/script.sh

cleanup() {
  rm /tmp/backup.*
  exit $?
}

vault_volume="/Volumes/vault/"
critical_volume="/Volumes/misc/"
critical_directories=($HOME/Desktop/ $HOME/critical/ $HOME/src/ $HOME/web/ $HOME/.ssh/ $HOME/my-music/ $HOME/writing/)
stampfile="backup-date.txt"

synchronize() {
  rsync -av --delete --ignore-errors "$@" || true
}

check_integrity() {
  local sdb1="$(mktemp /tmp/backup.XXXXXX)"
  cd "$1"
  integrity db . "$sdb1" || true

  local sdb2="$(mktemp /tmp/backup.XXXXXX)"
  cd "$2"
  integrity db . "$sdb2" || true

  integrity check "$sdb1" "$sdb2" || true
}

vault() {
  [[ -d "$vault_volume" ]] || error "$vault_volume not mounted"
  synchronize "$HOME/" "$vault_volume$HOME/"
  udate > "$vault_volume$HOME/$stampfile"
  #check_integrity "$HOME" "$vault_volume$HOME"
  diskutil eject "$vault_volume"
}

critical() {
  [[ -d "$critical_volume" ]] || error "$critical_volume not mounted"
  for critical in ${critical_directories[@]}; do
    synchronize "$critical" "$critical_volume/$critical"
  done
  udate > "$critical_volume/$stampfile"
  diskutil eject "$critical_volume"
}

[[ $# -gt 0 ]] || usage
for argument in $@; do
  case "$argument" in
  vault)
    vault
    ;;
  critical)
    critical
    ;;
  *)
    usage
    ;;
  esac
done
cleanup 0
