#!/usr/bin/env bash

# shellcheck disable=SC1111,SC2034
help="This program attempts to detect file corruption. It works by calculating
checksums of files and storing them in a sorted, compressed file (a checksum
database, ckdb).

You can then use the program to check that the files have the same checksums
as before, such as to verify that a filesystem backup matches the original.

Usage:

  integrity db pathname [ckdb-file]

For each pathname naming a directory, reads every regular file under the
pathname and calculates the filesâ€™ checksums. Stores the checksums and file
pathnames in either ckdb-file (if given), or pathname-[timestamp].sdb (a sibling
of pathname).

  integrity check old.ckdb new.ckdb

Given 2 ckdb files, prints out any differences."

source "$(dirname "$0")/script.sh"

if ! which zstd > /dev/null; then
  error "this program depends on zstd; you'll need to install it"
fi
if ! which b2sum > /dev/null; then
  error "this program depends on b2sum; you'll need to install it"
fi

check() {
  [[ $# -eq 2 ]] || usage
  local old
  old="$1"
  local new
  new="$2"
  zstdcat "$old" | diff -d - <(zstdcat "$new")
}

db() {
  [[ $# -eq 1 || $# -eq 2 ]] || usage
  local output
  output=${2-"$(get_ckdb_name "$1")"}

  # Turn exit-on-error off because we don't want to exit if `b2sum` can't read
  # some files.
  set +e
  set +o pipefail

  find "$1" -type f -print0 | xargs -0 -P0 -n10 b2sum -a blake2s -l 128 | sort | zstd > "$output"
  ls -l "$output"
}

get_ckdb_name() {
  local pathname
  pathname="$1"
  local parent
  parent=$(dirname "$pathname")
  local base
  base=$(basename "$pathname")
  local date
  date=$(udate)
  local output
  output="$parent"/"$base"-$date.ckdb
  echo "$output"
}

[[ $# -gt 0 ]] || usage
subprogram="$1"
shift

case $subprogram in
check)
  check "$@"
  ;;
db)
  db "$@"
  ;;
*)
  usage
  ;;
esac
