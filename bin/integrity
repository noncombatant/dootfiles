#!/usr/bin/env bash

# shellcheck disable=SC1111
help="This simple program attempts to detect file corruption. It works by calculating
checksums (SHA-256) of files and storing them in a file (.sdb, for “checksum
database”).

At any later point, you can then use the program to check that the files have
the same checksums as before.

Usage:

  integrity check old.sdb new.sdb

Given 2 checksum database (sdb) files, prints out any mismatches, indicating
file corruption.

  integrity db pathname [sdb-file]

For each pathname naming a directory, reads every regular file under the
pathname and calculates the files’ checksums. Stores the checksums and file
pathnames in either sdb-file (if given), or pathname-[timestamp].sdb (a sibling
of pathname)."

source "$(dirname "$0")/script.sh"

check() {
  [[ $# -eq 2 ]] || usage
  local old="$1"
  local new="$2"
  echo "$old → $new"
  bzcat "$old" | diff -d - <(bzcat "$new")
}

format_hash() {
  sed -E -e s'/SHA256\((.+)\)= ([0-9a-f]+)/\2 \1/'
}

db() {
  [[ $# -eq 1 || $# -eq 2 ]] || usage
  local output
  output=${2-"$(get_sdb_name "$1")"}
  find "$1" -type f -print0 | xargs -0 -P0 openssl sha256 | format_hash | sort | bzip2 > "$output"
  echo "$output"
}

get_sdb_name() {
  local pathname
  pathname="$1"
  local parent
  parent=$(dirname "$pathname")
  local base
  base=$(basename "$pathname")
  local date
  date=$(udate)
  local output
  output="$parent"/"$base"-$date.sdb
  echo "$output"
}

[[ $# -gt 0 ]] || usage
subprogram="$1"
shift

case $subprogram in
check)
  check "$@"
  ;;
db)
  db "$@"
  ;;
*)
  usage
  ;;
esac
